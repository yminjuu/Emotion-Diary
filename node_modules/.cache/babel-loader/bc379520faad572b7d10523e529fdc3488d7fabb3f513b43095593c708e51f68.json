{"ast":null,"code":"var _jsxFileName = \"/Users/yminjuu/Documents/\\u1100\\u1162\\u110B\\u1175\\u11AB \\u1111\\u1173\\u11AF\\u110C\\u1166\\u11A8/React.js Project/EmotionDiary/src/components/DiaryList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport MyButton from \"./MyButton\";\nimport DiaryItem from \"./DiaryItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst areEqual = (value, onChange, optionList) => {};\n\n//React.memo 사용: prop이 바뀌지 않으면 랜더링이 일어나지 않게 방지한다.\nconst ControlMenu = ({\n  value,\n  onChange,\n  optionList\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    className: \"ControlMenu\",\n    value: value,\n    onChange: e => {\n      onChange(e.target.value);\n    },\n    children: optionList.map((it, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: it.value,\n      children: it.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_c = ControlMenu;\nconst sortOptionList = [{\n  value: \"latest\",\n  name: \"최신순\"\n}, {\n  value: \"oldest\",\n  name: \"오래된 순\"\n}];\nconst emotionOptionList = [{\n  value: \"all\",\n  name: \"전부 다\"\n}, {\n  value: \"good\",\n  name: \"좋은 감정만\"\n}, {\n  value: \"bad\",\n  name: \"안 좋은 감정만\"\n}];\nconst DiaryList = ({\n  diaryList\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [sortType, setSortType] = useState(\"latest\");\n  //sortType: 현재 어떤 필터가 적용되어야 하는가?\n  // 1. latest 2. oldest\n\n  const [emotionType, setEmotionType] = useState(\"all\");\n  //emotionType: 현재 어떤 감정을 보여야 하는가?\n  // 1. all 2. good 3. bad\n\n  //시간순 정보 필터링을 위한 함수: 정렬된 다이어리 리스트를 반환\n  const getProcessedDiaryList = () => {\n    const filterCallback = item => {\n      console.log(\"filterclalback\");\n      if (emotionType === \"good\") {\n        return parseInt(item.emotion) <= 3;\n      } else {\n        return parseInt(item.emotion) > 3;\n      }\n    };\n    const compare = (a, b) => {\n      if (sortType === \"latest\") {\n        //시간이 작아야 우선순위가 큼\n        return parseInt(b.date) - parseInt(a.date);\n      } else if (sortType === \"oldest\") {\n        //커야 우선순위가 큼\n        return parseInt(a.date) - parseInt(b.date);\n      }\n    };\n    const copyList = JSON.parse(JSON.stringify(diaryList));\n    //깊은 복사: stringify: 배열을 문자열화해서 저장해줌\n    // parse: 문자열을 다시 배열로 복호화해줌\n    //깊은 복사를 하는 이유: 원본 배열을 훼손시키지 않기 위해서\n\n    const filteredList = emotionType === \"all\" ? copyList : copyList.filter(it => filterCallback(it)); //직접 만든 필터링 함수를 전달: return true일 때에만 배열에 할당됨\n    const sortedList = filteredList.sort(compare); //sort메서드에 직접 만든 비교함수를 전달한다.\n    return sortedList;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DiaryList\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu_wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left_col\",\n        children: [/*#__PURE__*/_jsxDEV(ControlMenu, {\n          value: sortType,\n          onChange: setSortType,\n          optionList: sortOptionList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ControlMenu, {\n          value: emotionType,\n          onChange: setEmotionType,\n          optionList: emotionOptionList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right_col\",\n        children: /*#__PURE__*/_jsxDEV(MyButton, {\n          type: \"positive\",\n          text: \"새 일기 쓰기\",\n          onClick: () => {\n            navigate(\"/new\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), getProcessedDiaryList().map(it => /*#__PURE__*/_createElement(DiaryItem, {\n      ...it,\n      key: it.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, it.content, \" \", it.emotion))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n//디폴트 props를 빈 배열로 전달\n_s(DiaryList, \"tNyORxj7SAKJUc+yyJX1MwC7rqc=\", false, function () {\n  return [useNavigate];\n});\n_c2 = DiaryList;\nDiaryList.defaultProps = {\n  diaryList: []\n};\nexport default DiaryList;\nvar _c, _c2;\n$RefreshReg$(_c, \"ControlMenu\");\n$RefreshReg$(_c2, \"DiaryList\");","map":{"version":3,"names":["React","useState","useNavigate","MyButton","DiaryItem","jsxDEV","_jsxDEV","createElement","_createElement","areEqual","value","onChange","optionList","ControlMenu","className","e","target","children","map","it","idx","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","sortOptionList","emotionOptionList","DiaryList","diaryList","_s","navigate","sortType","setSortType","emotionType","setEmotionType","getProcessedDiaryList","filterCallback","item","console","log","parseInt","emotion","compare","a","b","date","copyList","JSON","parse","stringify","filteredList","filter","sortedList","sort","type","text","onClick","key","id","__self","__source","content","_c2","defaultProps","$RefreshReg$"],"sources":["/Users/yminjuu/Documents/개인 플젝/React.js Project/EmotionDiary/src/components/DiaryList.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport MyButton from \"./MyButton\";\nimport DiaryItem from \"./DiaryItem\";\n\nconst areEqual = (value, onChange, optionList) => {};\n\n//React.memo 사용: prop이 바뀌지 않으면 랜더링이 일어나지 않게 방지한다.\nconst ControlMenu = ({ value, onChange, optionList }) => {\n  return (\n    <select\n      className=\"ControlMenu\"\n      value={value}\n      onChange={(e) => {\n        onChange(e.target.value);\n      }}\n    >\n      {optionList.map((it, idx) => (\n        <option key={idx} value={it.value}>\n          {it.name}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nconst sortOptionList = [\n  { value: \"latest\", name: \"최신순\" },\n  { value: \"oldest\", name: \"오래된 순\" },\n];\n\nconst emotionOptionList = [\n  { value: \"all\", name: \"전부 다\" },\n  { value: \"good\", name: \"좋은 감정만\" },\n  { value: \"bad\", name: \"안 좋은 감정만\" },\n];\n\nconst DiaryList = ({ diaryList }) => {\n  const navigate = useNavigate();\n\n  const [sortType, setSortType] = useState(\"latest\");\n  //sortType: 현재 어떤 필터가 적용되어야 하는가?\n  // 1. latest 2. oldest\n\n  const [emotionType, setEmotionType] = useState(\"all\");\n  //emotionType: 현재 어떤 감정을 보여야 하는가?\n  // 1. all 2. good 3. bad\n\n  //시간순 정보 필터링을 위한 함수: 정렬된 다이어리 리스트를 반환\n  const getProcessedDiaryList = () => {\n    const filterCallback = (item) => {\n      console.log(\"filterclalback\");\n      if (emotionType === \"good\") {\n        return parseInt(item.emotion) <= 3;\n      } else {\n        return parseInt(item.emotion) > 3;\n      }\n    };\n\n    const compare = (a, b) => {\n      if (sortType === \"latest\") {\n        //시간이 작아야 우선순위가 큼\n        return parseInt(b.date) - parseInt(a.date);\n      } else if (sortType === \"oldest\") {\n        //커야 우선순위가 큼\n        return parseInt(a.date) - parseInt(b.date);\n      }\n    };\n    const copyList = JSON.parse(JSON.stringify(diaryList));\n    //깊은 복사: stringify: 배열을 문자열화해서 저장해줌\n    // parse: 문자열을 다시 배열로 복호화해줌\n    //깊은 복사를 하는 이유: 원본 배열을 훼손시키지 않기 위해서\n\n    const filteredList =\n      emotionType === \"all\"\n        ? copyList\n        : copyList.filter((it) => filterCallback(it)); //직접 만든 필터링 함수를 전달: return true일 때에만 배열에 할당됨\n    const sortedList = filteredList.sort(compare); //sort메서드에 직접 만든 비교함수를 전달한다.\n    return sortedList;\n  };\n  return (\n    <div className=\"DiaryList\">\n      <div className=\"menu_wrapper\">\n        <div className=\"left_col\">\n          <ControlMenu\n            value={sortType}\n            onChange={setSortType}\n            optionList={sortOptionList}\n          ></ControlMenu>\n          <ControlMenu\n            value={emotionType}\n            onChange={setEmotionType}\n            optionList={emotionOptionList}\n          ></ControlMenu>\n        </div>\n        <div className=\"right_col\">\n          <MyButton\n            type={\"positive\"}\n            text={\"새 일기 쓰기\"}\n            onClick={() => {\n              navigate(\"/new\");\n            }}\n          ></MyButton>\n        </div>\n      </div>\n      {getProcessedDiaryList().map((it) => (\n        <DiaryItem {...it} key={it.id}>\n          {it.content} {it.emotion}\n        </DiaryItem>\n      ))}\n    </div>\n  );\n};\n\n//디폴트 props를 빈 배열로 전달\nDiaryList.defaultProps = {\n  diaryList: [],\n};\n\nexport default DiaryList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}