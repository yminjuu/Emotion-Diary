{"ast":null,"code":"import{useCallback,useContext,useRef,useState}from\"react\";import MyButton from\"./MyButton\";import{DiaryDispatchContext}from\"../App\";import{useNavigate}from\"react-router-dom\";import EmotionItem from\"./EmotionItem\";import{emotionList}from\"../util/emotion\";import React from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const env=process.env;env.PUBLIC_URL=env.PUBLIC_URL||\"\";//props로 받는 것: 수정하기를 누른 경우에 대비하여 originData를 받아와 띄운다.\nconst DiaryEditor=_ref=>{let{isEdit,originData}=_ref;const navigate=useNavigate();//날짜 선택 관리\nconst[date,setDate]=useState(isEdit?new Date(originData.date).toISOString().slice(0,10):new Date().toISOString().slice(0,10));//감정 선택 관리\nconst[emotion,setEmotion]=useState(isEdit?originData.emotion:3);const handleClickEmotion=useCallback(emotion=>{setEmotion(emotion);},[]);//본문 작성 관리\nconst[content,setContent]=useState(isEdit?originData.content:\"\");const contentInput=useRef();//1. 수정 완료 관리\nconst onEdit=useContext(DiaryDispatchContext).onEdit;//App.js에서 ContextProvider에서 뿌린 함수를 받아옴\nconst handleSubmit=()=>{if(window.confirm(\"일기를 수정하시겠습니까?\")){onEdit(originData.id,date,content,emotion);navigate(\"/\",{replace:true});}};//2. 새 일기 작성에서 일기를 추가할 때\nconst onCreate=useContext(DiaryDispatchContext).onCreate;//context로부터 onCreate 함수를 받아옴\n//새로운 일기 추가 관리\nconst AddNewDiary=()=>{if(content.length<1){contentInput.current.focus();return;}if(window.confirm(\"새로운 일기를 작성하시겠습니까?\")){const newDate=new Date(date).getTime();onCreate({emotion,content,date:newDate});setDate(new Date().toISOString().slice(0,10));setEmotion(3);setContent(\"\");navigate(\"/\",{replace:true});}};return/*#__PURE__*/_jsx(\"div\",{className:\"DiaryEditor\",children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"section\",{children:[/*#__PURE__*/_jsx(\"h4\",{children:\"\\uC624\\uB298\\uC740 \\uC5B8\\uC81C\\uC778\\uAC00\\uC694?\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input_box\",children:/*#__PURE__*/_jsx(\"input\",{className:\"input_date\",type:\"date\",value:date,onChange:e=>{setDate(e.target.value);}})})]}),/*#__PURE__*/_jsxs(\"section\",{children:[/*#__PURE__*/_jsx(\"h4\",{children:\"\\uC624\\uB298\\uC758 \\uAC10\\uC815\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input_box emotion_list_wrapper\",children:emotionList.map(it=>/*#__PURE__*/_jsx(EmotionItem,{onClick:handleClickEmotion,...it,isSelected:it.emotion_id===emotion},it.emotion_id))})]}),/*#__PURE__*/_jsxs(\"section\",{children:[/*#__PURE__*/_jsx(\"h4\",{children:\"\\uC624\\uB298\\uC758 \\uC77C\\uAE30\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input_box text_wrapper\",children:/*#__PURE__*/_jsx(\"textarea\",{ref:contentInput,placeholder:\"\\uC624\\uB298\\uC740 \\uC5B4\\uB560\\uB0A8\",value:content,onChange:e=>{contentInput.current.focus();setContent(e.target.value);}})})]}),/*#__PURE__*/_jsx(\"section\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"control_box\",children:[/*#__PURE__*/_jsx(MyButton,{text:\"취소하기\",type:\"default\",onClick:()=>{navigate(-1);}}),/*#__PURE__*/_jsx(MyButton,{text:\"작성 완료\",type:\"positive\",onClick:isEdit?handleSubmit:AddNewDiary})]})})]})});};export default/*#__PURE__*/React.memo(DiaryEditor);","map":{"version":3,"names":["useCallback","useContext","useRef","useState","MyButton","DiaryDispatchContext","useNavigate","EmotionItem","emotionList","React","jsx","_jsx","jsxs","_jsxs","env","process","PUBLIC_URL","DiaryEditor","_ref","isEdit","originData","navigate","date","setDate","Date","toISOString","slice","emotion","setEmotion","handleClickEmotion","content","setContent","contentInput","onEdit","handleSubmit","window","confirm","id","replace","onCreate","AddNewDiary","length","current","focus","newDate","getTime","className","children","type","value","onChange","e","target","map","it","onClick","isSelected","emotion_id","ref","placeholder","text","memo"],"sources":["/Users/yminjuu/Documents/개인 플젝/React.js Project/EmotionDiary/src/components/DiaryEditor.js"],"sourcesContent":["import { useCallback, useContext, useRef, useState } from \"react\";\nimport MyButton from \"./MyButton\";\nimport { DiaryDispatchContext } from \"../App\";\nimport { useNavigate } from \"react-router-dom\";\nimport EmotionItem from \"./EmotionItem\";\nimport { emotionList } from \"../util/emotion\";\nimport React from \"react\";\n\nconst env = process.env;\nenv.PUBLIC_URL = env.PUBLIC_URL || \"\";\n\n//props로 받는 것: 수정하기를 누른 경우에 대비하여 originData를 받아와 띄운다.\nconst DiaryEditor = ({ isEdit, originData }) => {\n  const navigate = useNavigate();\n\n  //날짜 선택 관리\n  const [date, setDate] = useState(\n    isEdit\n      ? new Date(originData.date).toISOString().slice(0, 10)\n      : new Date().toISOString().slice(0, 10)\n  );\n\n  //감정 선택 관리\n  const [emotion, setEmotion] = useState(isEdit ? originData.emotion : 3);\n\n  const handleClickEmotion = useCallback((emotion) => {\n    setEmotion(emotion);\n  }, []);\n\n  //본문 작성 관리\n  const [content, setContent] = useState(isEdit ? originData.content : \"\");\n\n  const contentInput = useRef();\n\n  //1. 수정 완료 관리\n  const onEdit = useContext(DiaryDispatchContext).onEdit; //App.js에서 ContextProvider에서 뿌린 함수를 받아옴\n\n  const handleSubmit = () => {\n    if (window.confirm(\"일기를 수정하시겠습니까?\")) {\n      onEdit(originData.id, date, content, emotion);\n      navigate(\"/\", { replace: true });\n    }\n  };\n\n  //2. 새 일기 작성에서 일기를 추가할 때\n  const onCreate = useContext(DiaryDispatchContext).onCreate; //context로부터 onCreate 함수를 받아옴\n\n  //새로운 일기 추가 관리\n  const AddNewDiary = () => {\n    if (content.length < 1) {\n      contentInput.current.focus();\n      return;\n    }\n    if (window.confirm(\"새로운 일기를 작성하시겠습니까?\")) {\n      const newDate = new Date(date).getTime();\n      onCreate({ emotion, content, date: newDate });\n      setDate(new Date().toISOString().slice(0, 10));\n      setEmotion(3);\n      setContent(\"\");\n      navigate(\"/\", { replace: true });\n    }\n  };\n\n  return (\n    <div className=\"DiaryEditor\">\n      <div>\n        <section>\n          <h4>오늘은 언제인가요?</h4>\n          <div className=\"input_box\">\n            <input\n              className=\"input_date\"\n              type=\"date\"\n              value={date}\n              onChange={(e) => {\n                setDate(e.target.value);\n              }}\n            ></input>\n          </div>\n        </section>\n        <section>\n          <h4>오늘의 감정</h4>\n          <div className=\"input_box emotion_list_wrapper\">\n            {emotionList.map((it) => (\n              <EmotionItem\n                onClick={handleClickEmotion}\n                key={it.emotion_id}\n                {...it}\n                isSelected={it.emotion_id === emotion}\n              ></EmotionItem>\n            ))}\n          </div>\n        </section>\n        <section>\n          <h4>오늘의 일기</h4>\n          <div className=\"input_box text_wrapper\">\n            <textarea\n              ref={contentInput}\n              placeholder=\"오늘은 어땠남\"\n              value={content}\n              onChange={(e) => {\n                contentInput.current.focus();\n                setContent(e.target.value);\n              }}\n            ></textarea>\n          </div>\n        </section>\n        <section>\n          <div className=\"control_box\">\n            <MyButton\n              text={\"취소하기\"}\n              type={\"default\"}\n              onClick={() => {\n                navigate(-1);\n              }}\n            ></MyButton>\n            <MyButton\n              text={\"작성 완료\"}\n              type={\"positive\"}\n              onClick={isEdit ? handleSubmit : AddNewDiary}\n            ></MyButton>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(DiaryEditor);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}