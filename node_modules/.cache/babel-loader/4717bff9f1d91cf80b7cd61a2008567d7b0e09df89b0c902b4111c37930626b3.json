{"ast":null,"code":"var _jsxFileName = \"/Users/yminjuu/Documents/\\u1100\\u1162\\u110B\\u1175\\u11AB \\u1111\\u1173\\u11AF\\u110C\\u1166\\u11A8/React.js Project/EmotionDiary/src/components/DiaryList.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport MyButton from \"./MyButton\";\nimport DiaryItem from \"./DiaryItem\";\n\n//필터링을 위한 ControlMenu\n//value: 어떤 게 선택된 상태인가? onChange: 다른 걸 선택하면 어떻게 할 것인가?\n//optionList: 어떤 option이 있는가?\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst ControlMenu = ({\n  value,\n  onChange,\n  optionList\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    className: \"ControlMenu\",\n    value: value,\n    onChange: e => {\n      onChange(e.target.value);\n    },\n    children: optionList.map((it, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: it.value,\n      children: it.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 36\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 12\n  }, this);\n};\n_c = ControlMenu;\nconst sortOptionList = [{\n  value: \"latest\",\n  name: \"최신순\"\n}, {\n  value: \"oldest\",\n  name: \"오래된 순\"\n}];\nconst emotionOptionList = [{\n  value: \"all\",\n  name: \"전부 다\"\n}, {\n  value: \"good\",\n  name: \"좋은 감정만\"\n}, {\n  value: \"bad\",\n  name: \"안 좋은 감정만\"\n}];\nconst DiaryList = ({\n  diaryList\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [sortType, setSortType] = useState('latest');\n  //sortType: 현재 어떤 필터가 적용되어야 하는가?\n  // 1. latest 2. oldest\n\n  const [emotionType, setEmotionType] = useState('all');\n  //emotionType: 현재 어떤 감정을 보여야 하는가?\n  // 1. all 2. good 3. bad\n\n  //시간순 정보 필터링을 위한 함수: 정렬된 다이어리 리스트를 반환\n  const getProcessedDiaryList = () => {\n    const filterCallback = item => {\n      console.log(\"filterclalback\");\n      if (emotionType === 'good') {\n        return parseInt(item.emotion) <= 3;\n      } else {\n        return parseInt(item.emotion) > 3;\n      }\n    };\n    const compare = (a, b) => {\n      if (sortType === \"latest\") {\n        //시간이 작아야 우선순위가 큼\n        return parseInt(b.date) - parseInt(a.date);\n      } else if (sortType === \"oldest\") {\n        //커야 우선순위가 큼\n        return parseInt(a.date) - parseInt(b.date);\n      }\n    };\n    const copyList = JSON.parse(JSON.stringify(diaryList));\n    //깊은 복사: stringify: 배열을 문자열화해서 저장해줌\n    // parse: 문자열을 다시 배열로 복호화해줌\n    //깊은 복사를 하는 이유: 원본 배열을 훼손시키지 않기 위해서\n\n    const filteredList = emotionType === 'all' ? copyList : copyList.filter(it => filterCallback(it)); //직접 만든 필터링 함수를 전달: return true일 때에만 배열에 할당됨\n    const sortedList = filteredList.sort(compare); //sort메서드에 직접 만든 비교함수를 전달한다.\n    console.log(sortedList);\n    return sortedList;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DiaryList\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu_wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left_col\",\n        children: [/*#__PURE__*/_jsxDEV(ControlMenu, {\n          value: sortType,\n          onChange: setSortType,\n          optionList: sortOptionList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ControlMenu, {\n          value: emotionType,\n          onChange: setEmotionType,\n          optionList: emotionOptionList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right_col\",\n        children: /*#__PURE__*/_jsxDEV(MyButton, {\n          type: 'positive',\n          text: '새 일기 쓰기',\n          onClick: () => {\n            navigate(\"/new\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), getProcessedDiaryList().map(it => /*#__PURE__*/_createElement(DiaryItem, {\n      ...it,\n      key: it.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, it.content, \" \", it.emotion))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n//디폴트 props를 빈 배열로 전달\n_s(DiaryList, \"D6EYehr9nxEd3/KiqQk+2yM3Dso=\", false, function () {\n  return [useNavigate];\n});\n_c2 = DiaryList;\nDiaryList.defaultProps = {\n  diaryList: []\n};\nexport default DiaryList;\nvar _c, _c2;\n$RefreshReg$(_c, \"ControlMenu\");\n$RefreshReg$(_c2, \"DiaryList\");","map":{"version":3,"names":["useState","useNavigate","MyButton","DiaryItem","jsxDEV","_jsxDEV","createElement","_createElement","ControlMenu","value","onChange","optionList","className","e","target","children","map","it","idx","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","sortOptionList","emotionOptionList","DiaryList","diaryList","_s","navigate","sortType","setSortType","emotionType","setEmotionType","getProcessedDiaryList","filterCallback","item","console","log","parseInt","emotion","compare","a","b","date","copyList","JSON","parse","stringify","filteredList","filter","sortedList","sort","type","text","onClick","key","id","__self","__source","content","_c2","defaultProps","$RefreshReg$"],"sources":["/Users/yminjuu/Documents/개인 플젝/React.js Project/EmotionDiary/src/components/DiaryList.js"],"sourcesContent":["import { useState } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport MyButton from \"./MyButton\"\nimport DiaryItem from \"./DiaryItem\"\n\n\n//필터링을 위한 ControlMenu\n//value: 어떤 게 선택된 상태인가? onChange: 다른 걸 선택하면 어떻게 할 것인가?\n//optionList: 어떤 option이 있는가?\nconst ControlMenu = ({value, onChange, optionList}) => {\n    return <select className=\"ControlMenu\" value={value} onChange={(e)=>{\n        onChange(e.target.value)\n    }}>\n        {optionList.map((it,idx)=>(<option key={idx} value={it.value}>{it.name}</option>\n            ))}\n    </select>\n}\n\nconst sortOptionList = [\n    {value:\"latest\", name:\"최신순\"},\n    {value:\"oldest\", name:\"오래된 순\"},\n]\n\nconst emotionOptionList = [\n    {value:\"all\", name:\"전부 다\"},\n    {value:\"good\", name:\"좋은 감정만\"},\n    {value:\"bad\", name:\"안 좋은 감정만\"},\n]\n\nconst DiaryList = ({diaryList}) => {\n    const navigate = useNavigate();\n\n    const [sortType, setSortType] = useState('latest');\n    //sortType: 현재 어떤 필터가 적용되어야 하는가?\n    // 1. latest 2. oldest\n    \n    const [emotionType, setEmotionType] = useState('all');\n    //emotionType: 현재 어떤 감정을 보여야 하는가?\n    // 1. all 2. good 3. bad\n\n    //시간순 정보 필터링을 위한 함수: 정렬된 다이어리 리스트를 반환\n    const getProcessedDiaryList = () => {\n\n        const filterCallback = (item) => {\n            console.log(\"filterclalback\");\n             if (emotionType==='good'){\n                return parseInt(item.emotion) <= 3;\n             }\n             else {\n                return parseInt(item.emotion) >3;\n             }\n        }\n\n        const compare = (a,b) => {\n            if (sortType === \"latest\"){\n                //시간이 작아야 우선순위가 큼\n                return parseInt(b.date)- parseInt(a.date);\n            }\n            else if (sortType === \"oldest\"){\n                //커야 우선순위가 큼\n                return parseInt(a.date)- parseInt(b.date);\n            }\n        }\n        const copyList = JSON.parse(JSON.stringify(diaryList));\n        //깊은 복사: stringify: 배열을 문자열화해서 저장해줌\n        // parse: 문자열을 다시 배열로 복호화해줌\n        //깊은 복사를 하는 이유: 원본 배열을 훼손시키지 않기 위해서\n\n        const filteredList = emotionType === 'all' ? copyList : copyList.filter((it)=>(filterCallback(it))); //직접 만든 필터링 함수를 전달: return true일 때에만 배열에 할당됨\n        const sortedList = filteredList.sort(compare); //sort메서드에 직접 만든 비교함수를 전달한다.\n        console.log(sortedList);\n        return sortedList;\n    }\n    return (\n    <div className=\"DiaryList\">\n        <div className=\"menu_wrapper\">\n        <div className=\"left_col\"> \n        <ControlMenu value={sortType} onChange={setSortType} optionList={sortOptionList}></ControlMenu>\n        <ControlMenu value={emotionType} onChange={setEmotionType} optionList={emotionOptionList}></ControlMenu>\n        </div>\n        <div className=\"right_col\">\n        <MyButton type={'positive'} text={'새 일기 쓰기'} onClick={()=>{navigate(\"/new\");}}></MyButton>\n        </div>\n        </div>\n        {getProcessedDiaryList().map((it)=>(\n            <DiaryItem {...it} key={it.id}>{it.content} {it.emotion}</DiaryItem>\n        ))}\n    </div>)\n}\n\n//디폴트 props를 빈 배열로 전달\nDiaryList.defaultProps = {\n    diaryList : [],\n};\n\nexport default DiaryList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}