{"ast":null,"code":"var _jsxFileName = \"/Users/yminjuu/Documents/\\u1100\\u1162\\u110B\\u1175\\u11AB \\u1111\\u1173\\u11AF\\u110C\\u1166\\u11A8/React.js Project/EmotionDiary/src/components/DiaryList.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\n\n//필터링을 위한 ControlMenu\n//value: 어떤 게 선택된 상태인가? onChange: 다른 걸 선택하면 어떻게 할 것인가?\n//optionList: 어떤 option이 있는가?\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ControlMenu = ({\n  value,\n  onChange,\n  optionList\n}) => {\n  _s();\n  const [sortType, setSortType] = useState('latest');\n  const [emotionType, setEmotionType] = useState('all');\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    value: value,\n    onChange: e => {\n      onChange(e.target.value);\n    },\n    children: optionList.map((it, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: it.value,\n      children: it.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 36\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 12\n  }, this);\n};\n_s(ControlMenu, \"ytcLNDACaS7BGnUaY89uJgyo1uw=\");\n_c = ControlMenu;\nconst sortOptionList = [{\n  value: \"latest\",\n  name: \"최신순\"\n}, {\n  value: \"oldest\",\n  name: \"오래된 순\"\n}];\nconst emotionOptionList = [{\n  value: \"all\",\n  name: \"전부 다\"\n}, {\n  value: \"good\",\n  name: \"좋은 감정만\"\n}, {\n  value: \"bad\",\n  name: \"안 좋은 감정만\"\n}];\nconst DiaryList = ({\n  diaryList\n}) => {\n  //시간순 정보 필터링을 위한 함수: 정렬된 다이어리 리스트를 반환\n  const getProcessedDiaryList = () => {\n    const compare = (a, b) => {\n      if (sortType === \"latest\") {\n        //시간이 작아야 우선순위가 큼\n        return parseInt(b.date) - parseInt(a.date);\n      } else if (sortType === \"oldest\") {\n        //커야 우선순위가 큼\n        return parseInt(a.date) - parseInt(b.date);\n      }\n    };\n    const copyList = JSON.parse(JSON.stringify(diaryList));\n    //깊은 복사: stringify: 배열을 문자열화해서 저장해줌\n    // parse: 문자열을 다시 배열로 복호화해줌\n    //깊은 복사를 하는 이유: 원본 배열을 훼손시키지 않기 위해서\n    const sortedList = copyList.sort(compare); //sort메서드에 직접 만든 비교함수를 전달한다.\n\n    return sortedList;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ControlMenu, {\n      value: sortType,\n      onChange: setSortType,\n      optionList: sortOptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ControlMenu, {\n      value: emotionType,\n      onChange: setEmotionType,\n      optionList: emotionOptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), getProcessedDiaryList().map(it => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: it.content\n    }, it.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n//디폴트 props를 빈 배열로 전달\n_c2 = DiaryList;\nDiaryList.defaultProps = {\n  diaryList: []\n};\nexport default DiaryList;\nvar _c, _c2;\n$RefreshReg$(_c, \"ControlMenu\");\n$RefreshReg$(_c2, \"DiaryList\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","ControlMenu","value","onChange","optionList","_s","sortType","setSortType","emotionType","setEmotionType","e","target","children","map","it","idx","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","sortOptionList","emotionOptionList","DiaryList","diaryList","getProcessedDiaryList","compare","a","b","parseInt","date","copyList","JSON","parse","stringify","sortedList","sort","content","id","_c2","defaultProps","$RefreshReg$"],"sources":["/Users/yminjuu/Documents/개인 플젝/React.js Project/EmotionDiary/src/components/DiaryList.js"],"sourcesContent":["import { useState } from \"react\"\n\n//필터링을 위한 ControlMenu\n//value: 어떤 게 선택된 상태인가? onChange: 다른 걸 선택하면 어떻게 할 것인가?\n//optionList: 어떤 option이 있는가?\nconst ControlMenu = ({value, onChange, optionList}) => {\n    const [sortType, setSortType] = useState('latest');\n    \n    const [emotionType, setEmotionType] = useState('all');\n\n    return <select value={value} onChange={(e)=>{\n        onChange(e.target.value)\n    }}>\n        {optionList.map((it,idx)=>(<option key={idx} value={it.value}>{it.name}</option>\n            ))}\n    </select>\n}\n\nconst sortOptionList = [\n    {value:\"latest\", name:\"최신순\"},\n    {value:\"oldest\", name:\"오래된 순\"},\n]\n\nconst emotionOptionList = [\n    {value:\"all\", name:\"전부 다\"},\n    {value:\"good\", name:\"좋은 감정만\"},\n    {value:\"bad\", name:\"안 좋은 감정만\"},\n]\n\nconst DiaryList = ({diaryList}) => {\n    //시간순 정보 필터링을 위한 함수: 정렬된 다이어리 리스트를 반환\n    const getProcessedDiaryList = () => {\n        const compare = (a,b) => {\n            if (sortType === \"latest\"){\n                //시간이 작아야 우선순위가 큼\n                return parseInt(b.date)- parseInt(a.date);\n            }\n            else if (sortType === \"oldest\"){\n                //커야 우선순위가 큼\n                return parseInt(a.date)- parseInt(b.date);\n            }\n        }\n\n        const copyList = JSON.parse(JSON.stringify(diaryList));\n        //깊은 복사: stringify: 배열을 문자열화해서 저장해줌\n        // parse: 문자열을 다시 배열로 복호화해줌\n        //깊은 복사를 하는 이유: 원본 배열을 훼손시키지 않기 위해서\n        const sortedList = copyList.sort(compare); //sort메서드에 직접 만든 비교함수를 전달한다.\n\n        return sortedList;\n    }\n    return (\n    <div>\n        <ControlMenu value={sortType} onChange={setSortType} optionList={sortOptionList}></ControlMenu>\n        <ControlMenu value={emotionType} onChange={setEmotionType} optionList={emotionOptionList}></ControlMenu>\n        {getProcessedDiaryList().map((it)=>(\n            <div key={it.id}>{it.content}</div>\n        ))}\n    </div>)\n}\n\n//디폴트 props를 빈 배열로 전달\nDiaryList.defaultProps = {\n    diaryList : [],\n};\n\nexport default DiaryList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}