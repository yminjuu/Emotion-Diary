{"ast":null,"code":"var _jsxFileName = \"/Users/yminjuu/Documents/\\u1100\\u1162\\u110B\\u1175\\u11AB \\u1111\\u1173\\u11AF\\u110C\\u1166\\u11A8/React.js Project/EmotionDiary/src/components/DiaryList.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\n\n//필터링을 위한 ControlMenu\n//value: 어떤 게 선택된 상태인가? onChange: 다른 걸 선택하면 어떻게 할 것인가?\n//optionList: 어떤 option이 있는가?\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ControlMenu = ({\n  value,\n  onChange,\n  optionList\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    value: value,\n    onChange: e => {\n      onChange(e.target.value);\n    },\n    children: optionList.map((it, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: it.value,\n      children: it.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 36\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 12\n  }, this);\n};\n_c = ControlMenu;\nconst sortOptionList = [{\n  value: \"latest\",\n  name: \"최신순\"\n}, {\n  value: \"oldest\",\n  name: \"오래된 순\"\n}];\nconst emotionOptionList = [{\n  value: \"all\",\n  name: \"전부 다\"\n}, {\n  value: \"good\",\n  name: \"좋은 감정만\"\n}, {\n  value: \"bad\",\n  name: \"안 좋은 감정만\"\n}];\nconst DiaryList = ({\n  diaryList\n}) => {\n  _s();\n  const getProcessedDiaryList = () => {\n    const copyList = JSON.parse(JSON.stringify(diaryList));\n    //깊은 복사: stringify: 배열을 문자열화해서 저장해줌\n    // parse: 문자열을 다시 배열로 복호화해줌.\n\n    // const sortedList\n  };\n  const [sortType, setSortType] = useState('latest');\n  const [emotionType, setEmotionType] = useState('all');\n  console.log({\n    diaryList\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ControlMenu, {\n      value: sortType,\n      onChange: setSortType,\n      optionList: sortOptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ControlMenu, {\n      value: emotionType,\n      onChange: setEmotionType,\n      optionList: emotionOptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), diaryList.map(it => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: it.content\n    }, it.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n//디폴트 props를 빈 배열로 전달\n_s(DiaryList, \"ytcLNDACaS7BGnUaY89uJgyo1uw=\");\n_c2 = DiaryList;\nDiaryList.defaultProps = {\n  diaryList: []\n};\nexport default DiaryList;\nvar _c, _c2;\n$RefreshReg$(_c, \"ControlMenu\");\n$RefreshReg$(_c2, \"DiaryList\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","ControlMenu","value","onChange","optionList","e","target","children","map","it","idx","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","sortOptionList","emotionOptionList","DiaryList","diaryList","_s","getProcessedDiaryList","copyList","JSON","parse","stringify","sortType","setSortType","emotionType","setEmotionType","console","log","content","id","_c2","defaultProps","$RefreshReg$"],"sources":["/Users/yminjuu/Documents/개인 플젝/React.js Project/EmotionDiary/src/components/DiaryList.js"],"sourcesContent":["import { useState } from \"react\"\n\n\n//필터링을 위한 ControlMenu\n//value: 어떤 게 선택된 상태인가? onChange: 다른 걸 선택하면 어떻게 할 것인가?\n//optionList: 어떤 option이 있는가?\nconst ControlMenu = ({value, onChange, optionList}) => {\n    return <select value={value} onChange={(e)=>{\n        onChange(e.target.value)\n    }}>\n        {optionList.map((it,idx)=>(<option key={idx} value={it.value}>{it.name}</option>\n            ))}\n    </select>\n}\n\nconst sortOptionList = [\n    {value:\"latest\", name:\"최신순\"},\n    {value:\"oldest\", name:\"오래된 순\"},\n]\n\nconst emotionOptionList = [\n    {value:\"all\", name:\"전부 다\"},\n    {value:\"good\", name:\"좋은 감정만\"},\n    {value:\"bad\", name:\"안 좋은 감정만\"},\n]\n\nconst DiaryList = ({diaryList}) => {\n\n    const getProcessedDiaryList = () => {\n        const copyList = JSON.parse(JSON.stringify(diaryList));\n        //깊은 복사: stringify: 배열을 문자열화해서 저장해줌\n        // parse: 문자열을 다시 배열로 복호화해줌.\n\n        // const sortedList\n    }\n\n    const [sortType, setSortType] = useState('latest');\n    \n    const [emotionType, setEmotionType] = useState('all');\n\n    console.log({diaryList});\n    return (\n    <div>\n        <ControlMenu value={sortType} onChange={setSortType} optionList={sortOptionList}></ControlMenu>\n        <ControlMenu value={emotionType} onChange={setEmotionType} optionList={emotionOptionList}></ControlMenu>\n        {diaryList.map((it)=>(\n            <div key={it.id}>{it.content}</div>\n        ))}\n    </div>)\n}\n\n//디폴트 props를 빈 배열로 전달\nDiaryList.defaultProps = {\n    diaryList : [],\n};\n\nexport default DiaryList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}