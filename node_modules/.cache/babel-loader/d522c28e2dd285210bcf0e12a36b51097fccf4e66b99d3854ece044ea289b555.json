{"ast":null,"code":"import React,{useState}from\"react\";import{useNavigate}from\"react-router-dom\";import MyButton from\"./MyButton\";import DiaryItem from\"./DiaryItem\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{createElement as _createElement}from\"react\";const areEqual=(value,onChange,optionList)=>{};//React.memo 사용: prop이 바뀌지 않으면 랜더링이 일어나지 않게 방지한다.\n//만약 props로 받는 onChange 함수가 state의 상태 변화 함수가 아니라\n//일반 함수였다면 해당 함수를 useCallback 메서드를 사용하여 묶어줘야 했을 것이다.\n//결론적으로 기억해야 할 것은 state의 상태 변화 함수는 동일한 메모리를 보장한다는 것임!\nconst ControlMenu=/*#__PURE__*/React.memo(_ref=>{let{value,onChange,optionList}=_ref;return/*#__PURE__*/_jsx(\"select\",{className:\"ControlMenu\",value:value,onChange:e=>{onChange(e.target.value);},children:optionList.map((it,idx)=>/*#__PURE__*/_jsx(\"option\",{value:it.value,children:it.name},idx))});});const sortOptionList=[{value:\"latest\",name:\"최신순\"},{value:\"oldest\",name:\"오래된 순\"}];const emotionOptionList=[{value:\"all\",name:\"전부 다\"},{value:\"good\",name:\"좋은 감정만\"},{value:\"bad\",name:\"안 좋은 감정만\"}];const DiaryList=_ref2=>{let{diaryList}=_ref2;const navigate=useNavigate();const[sortType,setSortType]=useState(\"latest\");//sortType: 현재 어떤 필터가 적용되어야 하는가?\n// 1. latest 2. oldest\nconst[emotionType,setEmotionType]=useState(\"all\");//emotionType: 현재 어떤 감정을 보여야 하는가?\n// 1. all 2. good 3. bad\n//시간순 정보 필터링을 위한 함수: 정렬된 다이어리 리스트를 반환\nconst getProcessedDiaryList=()=>{const filterCallback=item=>{console.log(\"filterclalback\");if(emotionType===\"good\"){return parseInt(item.emotion)<=3;}else{return parseInt(item.emotion)>3;}};const compare=(a,b)=>{if(sortType===\"latest\"){//시간이 작아야 우선순위가 큼\nreturn parseInt(b.date)-parseInt(a.date);}else if(sortType===\"oldest\"){//커야 우선순위가 큼\nreturn parseInt(a.date)-parseInt(b.date);}};const copyList=JSON.parse(JSON.stringify(diaryList));//깊은 복사: stringify: 배열을 문자열화해서 저장해줌\n// parse: 문자열을 다시 배열로 복호화해줌\n//깊은 복사를 하는 이유: 원본 배열을 훼손시키지 않기 위해서\nconst filteredList=emotionType===\"all\"?copyList:copyList.filter(it=>filterCallback(it));//직접 만든 필터링 함수를 전달: return true일 때에만 배열에 할당됨\nconst sortedList=filteredList.sort(compare);//sort메서드에 직접 만든 비교함수를 전달한다.\nreturn sortedList;};return/*#__PURE__*/_jsxs(\"div\",{className:\"DiaryList\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"menu_wrapper\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"left_col\",children:[/*#__PURE__*/_jsx(ControlMenu,{value:sortType,onChange:setSortType,optionList:sortOptionList}),/*#__PURE__*/_jsx(ControlMenu,{value:emotionType,onChange:setEmotionType,optionList:emotionOptionList})]}),/*#__PURE__*/_jsx(\"div\",{className:\"right_col\",children:/*#__PURE__*/_jsx(MyButton,{type:\"positive\",text:\"새 일기 쓰기\",onClick:()=>{navigate(\"/new\");}})})]}),getProcessedDiaryList().map(it=>/*#__PURE__*/_createElement(DiaryItem,{...it,key:it.id}))]});};//디폴트 props를 빈 배열로 전달\nDiaryList.defaultProps={diaryList:[]};export default DiaryList;","map":{"version":3,"names":["React","useState","useNavigate","MyButton","DiaryItem","jsx","_jsx","jsxs","_jsxs","createElement","_createElement","areEqual","value","onChange","optionList","ControlMenu","memo","_ref","className","e","target","children","map","it","idx","name","sortOptionList","emotionOptionList","DiaryList","_ref2","diaryList","navigate","sortType","setSortType","emotionType","setEmotionType","getProcessedDiaryList","filterCallback","item","console","log","parseInt","emotion","compare","a","b","date","copyList","JSON","parse","stringify","filteredList","filter","sortedList","sort","type","text","onClick","key","id","defaultProps"],"sources":["/Users/yminjuu/Documents/개인 플젝/React.js Project/EmotionDiary/src/components/DiaryList.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport MyButton from \"./MyButton\";\nimport DiaryItem from \"./DiaryItem\";\n\nconst areEqual = (value, onChange, optionList) => {};\n\n//React.memo 사용: prop이 바뀌지 않으면 랜더링이 일어나지 않게 방지한다.\n//만약 props로 받는 onChange 함수가 state의 상태 변화 함수가 아니라\n//일반 함수였다면 해당 함수를 useCallback 메서드를 사용하여 묶어줘야 했을 것이다.\n//결론적으로 기억해야 할 것은 state의 상태 변화 함수는 동일한 메모리를 보장한다는 것임!\nconst ControlMenu = React.memo(({ value, onChange, optionList }) => {\n  return (\n    <select\n      className=\"ControlMenu\"\n      value={value}\n      onChange={(e) => {\n        onChange(e.target.value);\n      }}\n    >\n      {optionList.map((it, idx) => (\n        <option key={idx} value={it.value}>\n          {it.name}\n        </option>\n      ))}\n    </select>\n  );\n});\n\nconst sortOptionList = [\n  { value: \"latest\", name: \"최신순\" },\n  { value: \"oldest\", name: \"오래된 순\" },\n];\n\nconst emotionOptionList = [\n  { value: \"all\", name: \"전부 다\" },\n  { value: \"good\", name: \"좋은 감정만\" },\n  { value: \"bad\", name: \"안 좋은 감정만\" },\n];\n\nconst DiaryList = ({ diaryList }) => {\n  const navigate = useNavigate();\n\n  const [sortType, setSortType] = useState(\"latest\");\n  //sortType: 현재 어떤 필터가 적용되어야 하는가?\n  // 1. latest 2. oldest\n\n  const [emotionType, setEmotionType] = useState(\"all\");\n  //emotionType: 현재 어떤 감정을 보여야 하는가?\n  // 1. all 2. good 3. bad\n\n  //시간순 정보 필터링을 위한 함수: 정렬된 다이어리 리스트를 반환\n  const getProcessedDiaryList = () => {\n    const filterCallback = (item) => {\n      console.log(\"filterclalback\");\n      if (emotionType === \"good\") {\n        return parseInt(item.emotion) <= 3;\n      } else {\n        return parseInt(item.emotion) > 3;\n      }\n    };\n\n    const compare = (a, b) => {\n      if (sortType === \"latest\") {\n        //시간이 작아야 우선순위가 큼\n        return parseInt(b.date) - parseInt(a.date);\n      } else if (sortType === \"oldest\") {\n        //커야 우선순위가 큼\n        return parseInt(a.date) - parseInt(b.date);\n      }\n    };\n    const copyList = JSON.parse(JSON.stringify(diaryList));\n    //깊은 복사: stringify: 배열을 문자열화해서 저장해줌\n    // parse: 문자열을 다시 배열로 복호화해줌\n    //깊은 복사를 하는 이유: 원본 배열을 훼손시키지 않기 위해서\n\n    const filteredList =\n      emotionType === \"all\"\n        ? copyList\n        : copyList.filter((it) => filterCallback(it)); //직접 만든 필터링 함수를 전달: return true일 때에만 배열에 할당됨\n    const sortedList = filteredList.sort(compare); //sort메서드에 직접 만든 비교함수를 전달한다.\n    return sortedList;\n  };\n  return (\n    <div className=\"DiaryList\">\n      <div className=\"menu_wrapper\">\n        <div className=\"left_col\">\n          <ControlMenu\n            value={sortType}\n            onChange={setSortType}\n            optionList={sortOptionList}\n          ></ControlMenu>\n          <ControlMenu\n            value={emotionType}\n            onChange={setEmotionType}\n            optionList={emotionOptionList}\n          ></ControlMenu>\n        </div>\n        <div className=\"right_col\">\n          <MyButton\n            type={\"positive\"}\n            text={\"새 일기 쓰기\"}\n            onClick={() => {\n              navigate(\"/new\");\n            }}\n          ></MyButton>\n        </div>\n      </div>\n      {getProcessedDiaryList().map((it) => (\n        <DiaryItem {...it} key={it.id}></DiaryItem>\n      ))}\n    </div>\n  );\n};\n\n//디폴트 props를 빈 배열로 전달\nDiaryList.defaultProps = {\n  diaryList: [],\n};\n\nexport default DiaryList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}